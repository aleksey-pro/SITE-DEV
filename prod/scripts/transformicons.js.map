{"version":3,"names":[],"mappings":"","sources":["transformicons.js"],"sourcesContent":["(function (root, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    // AMD module\r\n    define(factory);\r\n  } else if (typeof exports === 'object') {\r\n    // CommonJS-like environment (i.e. Node)\r\n    module.exports = factory();\r\n  } else {\r\n    // Browser global\r\n    root.transformicons = factory();\r\n  }\r\n}(this || window, function () {\r\n\r\n  // ####################\r\n  // MODULE TRANSFORMICON\r\n  // ####################\r\n  'use strict';\r\n\r\n  var\r\n    tcon = {}, // static class\r\n    _transformClass = 'tcon-transform',\r\n\r\n    // const\r\n    DEFAULT_EVENTS = {\r\n      transform : ['click'],\r\n      revert : ['click']\r\n    };\r\n\r\n  // ##############\r\n  // private methods\r\n  // ##############\r\n\r\n  /**\r\n  * Normalize a selector string, a single DOM element or an array of elements into an array of DOM elements.\r\n  * @private\r\n  *\r\n  * @param {(string|element|array)} elements - Selector, DOM element or Array of DOM elements\r\n  * @returns {array} Array of DOM elements\r\n  */\r\n  var getElementList = function (elements) {\r\n    if (typeof elements === 'string') {\r\n      return Array.prototype.slice.call(document.querySelectorAll(elements));\r\n    } else if (typeof elements === 'undefined' || elements instanceof Array) {\r\n      return elements;\r\n    } else {\r\n      return [elements];\r\n    }\r\n  };\r\n\r\n  /**\r\n  * Normalize a string with eventnames separated by spaces or an array of eventnames into an array of eventnames.\r\n  * @private\r\n  *\r\n  * @param {(string|array)} elements - String with eventnames separated by spaces or array of eventnames\r\n  * @returns {array} Array of eventnames\r\n  */\r\n  var getEventList = function (events) {\r\n    if (typeof events === 'string') {\r\n      return events.toLowerCase().split(' ');\r\n    } else {\r\n      return events;\r\n    }\r\n  };\r\n\r\n  /**\r\n  * Attach or remove transformicon events to one or more elements.\r\n  * @private\r\n  *\r\n  * @param {(string|element|array)} elements - Selector, DOM element or Array of DOM elements to be toggled\r\n  * @param {object} [events] - An Object containing one or more special event definitions\r\n  * @param {boolean} [remove=false] - Defines wether the listeners should be added (default) or removed.\r\n  */\r\n  var setListeners = function (elements, events, remove) {\r\n    var\r\n      method = (remove ? 'remove' : 'add') + 'EventListener',\r\n      elementList = getElementList(elements),\r\n      currentElement = elementList.length,\r\n      eventLists = {};\r\n\r\n    // get events or use defaults\r\n    for (var prop in DEFAULT_EVENTS) {\r\n      eventLists[prop] = (events && events[prop]) ? getEventList(events[prop]) : DEFAULT_EVENTS[prop];\r\n    }\r\n    \r\n    // add or remove all events for all occasions to all elements\r\n    while(currentElement--) {\r\n      for (var occasion in eventLists) {\r\n        var currentEvent = eventLists[occasion].length;\r\n        while(currentEvent--) {\r\n          elementList[currentElement][method](eventLists[occasion][currentEvent], handleEvent);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n  * Event handler for transform events.\r\n  * @private\r\n  *\r\n  * @param {object} event - event object\r\n  */\r\n  var handleEvent = function (event) {\r\n    tcon.toggle(event.currentTarget);\r\n  };\r\n\r\n  // ##############\r\n  // public methods\r\n  // ##############\r\n\r\n  /**\r\n  * Add transformicon behavior to one or more elements.\r\n  * @public\r\n  *\r\n  * @param {(string|element|array)} elements - Selector, DOM element or Array of DOM elements to be toggled\r\n  * @param {object} [events] - An Object containing one or more special event definitions\r\n  * @param {(string|array)} [events.transform] - One or more events that trigger the transform. Can be an Array or string with events seperated by space.\r\n  * @param {(string|array)} [events.revert] - One or more events that trigger the reversion. Can be an Array or string with events seperated by space.\r\n  * @returns {transformicon} transformicon instance for chaining\r\n  */\r\n  tcon.add = function (elements, events) {\r\n    setListeners(elements, events);\r\n    return tcon;\r\n  };\r\n\r\n  /**\r\n  * Remove transformicon behavior from one or more elements.\r\n  * @public\r\n  *\r\n  * @param {(string|element|array)} elements - Selector, DOM element or Array of DOM elements to be toggled\r\n  * @param {object} [events] - An Object containing one or more special event definitions\r\n  * @param {(string|array)} [events.transform] - One or more events that trigger the transform. Can be an Array or string with events seperated by space.\r\n  * @param {(string|array)} [events.revert] - One or more events that trigger the reversion. Can be an Array or string with events seperated by space.\r\n  * @returns {transformicon} transformicon instance for chaining\r\n  */\r\n  tcon.remove = function (elements, events) {\r\n    setListeners(elements, events, true);\r\n    return tcon;\r\n  };\r\n\r\n  /**\r\n  * Put one or more elements in the transformed state.\r\n  * @public\r\n  *\r\n  * @param {(string|element|array)} elements - Selector, DOM element or Array of DOM elements to be transformed\r\n  * @returns {transformicon} transformicon instance for chaining\r\n  */\r\n  tcon.transform = function (elements) {\r\n    getElementList(elements).forEach(function(element) {\r\n      element.classList.add(_transformClass);\r\n    });\r\n    return tcon;\r\n  };\r\n\r\n  /**\r\n  * Revert one or more elements to the original state.\r\n  * @public\r\n  *\r\n  * @param {(string|element|array)} elements - Selector, DOM element or Array of DOM elements to be reverted\r\n  * @returns {transformicon} transformicon instance for chaining\r\n  */\r\n  tcon.revert = function (elements) {\r\n    getElementList(elements).forEach(function(element) {\r\n      element.classList.remove(_transformClass);\r\n    });\r\n    return tcon;\r\n  };\r\n  \r\n  /**\r\n  * Toggles one or more elements between transformed and original state.\r\n  * @public\r\n  *\r\n  * @param {(string|element|array)} elements - Selector, DOM element or Array of DOM elements to be toggled\r\n  * @returns {transformicon} transformicon instance for chaining\r\n  */\r\n  tcon.toggle = function (elements) {\r\n    getElementList(elements).forEach(function(element) {\r\n      tcon[element.classList.contains(_transformClass) ? 'revert' : 'transform'](element);\r\n    });\r\n    return tcon;\r\n  };\r\n\r\n  return tcon;\r\n}));"],"file":"transformicons.js","sourceRoot":"/source/"}